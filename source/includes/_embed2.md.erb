# Embed2

Embed2 is a small JavaScript application that embeds your Ada Chat bot into your web page.

## Audience

This document is intended for bot specialists and developers with working knowledge of HTML. For some of the advanced setup, basic knowledge of JavaScript is required. The document also assumes you have a hosted web page that you have write access to.

## Quick Start

### 1. Turn on your bot
The first step towards adding your Ada Chat Bot to your web page is to turn on the Web Chat integration in your Settings > Platforms page.

<%= image_tag "images/turn-on-bot.png" %>

### 2. Embed script

```html
<head>
  ...
  <script
    id="__ada"
    data-handle="<YOUR-BOT-HANDLE>"
    src="https://static.ada.support/embed2.js"
  ></script>
</head>
```
> ðŸ’¡ Be sure to replace `<YOUR-BOT-HANDLE>` with your own bot handle. It's usually the name of your company.

Once you have your website all ready-to-go, find the page where you'd like to embed the Ada Chat bot. This will be a .html file (or equivalent). Here you will need to paste the following into the `<head>` tag.

### 3. That's it! ðŸŽ‰
You should now see a small question mark button on the bottom right corner of your page. Clicking the button will toggle the Web Chat in and out of view.

[You can see see a working example here.](https://jsfiddle.net/avj0fdL3/)

## Advanced Setup


## API Reference

Embed2 supports numerous settings and methods to help you customize the look and behaviour of your bot. Settings are set in the `adaSettings` object when you embed your script. They determine intrinsic properties like bot style and behaviour. Conversely, methods can be called at any point in time to toggle Chat, update user meta data, and more.

### Settings
Settings are set on the window object as `window.adaSettings = { ... }`. Alternatively, they can be passed directly do `adaEmbed.start({ ... })` for advanced configurations. A full list of available settings is provided below:

#### `adaReadyCallback?(params: { isRolledOut: boolean }): void`

```html
<script type="text/javascript">
  window.adaSettings = {
    adaReadyCallback: ({ isRolledOut }) => {
      console.log("Ada Embed is done setting up. Chat support is now available.");
    }
  }
</script>
```
Specifies a callback function to be called when Embed2 has finished setting up. This is especially useful when Embed2 is loaded asynchronously.

#### `analyticsCallback?(analytics: object): void`

```html
<script type="text/javascript">
  window.adaSettings = {
    analyticsCallback: (event) => {
      // Here is where you can forward this event to Adobe (or elsewhere)
      console.log(event);
    }
  }
</script>
```

> Example event:

```js
{
  chatter_id: "5d9f84b2a35763fc71cb7bf",
  session_id: "59f84b22c4683df7c38bf69",
  answer_name: "Greeting",
  event_name: "answer presented",
  authenticated: false
}
```

Can be used to pass back data analytics. Make sure you have `analyticsCallback` feature enabled on your bot - you can check this with your account manager.

#### `chatterTokenCallback?(chatter: string): void`
Specifies a callback for when the `chatter` token has been set in Chat.

#### `cluster?: string`
Specifies the Kubernetes cluster to be used. Unless directed by an Ada team member, you will not need to change this value.

#### `crossWindowPersistence?: boolean`
When set enables the Chat drawer open / close state to persist across windows and page refreshes using the `Window.sessionStorage` API. When the browser is closed the state is forgotten.

<aside class="notice">
We recommend enabling this feature if your bot uses Ada Glass.
</aside>

#### `domain?: string`
Can be used to change the subdomain. Unless directed by an Ada team member, you will not need to change this value.

#### `embedStyles:? string`
The embedStyles option can be used to override default styles inside Embed2 elements. The value of the string should be the CSS rule-set you wish to apply inside the iFrame. Note that the `ui_customization` feature flag is required to use this feature.

<aside class="warning">
Setting custom styles based on Embed2 elements is inherently brittle, and can cause your styles to break over time. We do not recommend use of custom styles unless absolutely necessary. If custom styles are used, you should only rely on direct element IDs.
</aside>

#### `eventCallbacks?: { [eventName: string]: (jsEvent: object) => void }`
Used in conjunction with Custom JavaScript Event Blocks to trigger specified callbacks as part of a conversation. Requires the `custom_javascript_event_block` feature flag to be turned on.

#### `greeting?: string`
This can be used to customize the greeting messages that new users see. This is useful for setting page-specific greetings across your app. The greeting should correspond to the ID of the Answer you would like to use. The ID can be found in the URL of the corresponding Answer in the dashboard.

#### `handle:? string`
Can be used to specify the bot handle if one is not specified in the script `data-handle` attribute.

#### `hideMask?: boolean`
When set to `true`, this will prevent the default mask from appearing over top of your site's content when opened on desktop.

<aside class="notice">
We recommend setting the value to `false`. This will allow end-users to navigate the page while the Ada Chat window is open.
</aside>

#### `language?: string`
Takes in a language code to programatically set the bot language. Languages must first be turned on in the *Settings > Multilingual* page of your Ada dashboard. Language codes follow the [ISO 639-1 language format](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).

#### `metaFields?: object`

```html
<script type="text/javascript">
  window.adaSettings = {
    metaFields: {
      phone_number: "(123) 456-7890",
      name: "Ada Lovelace"
    }
  }
</script>
```

Used to pass meta information about a `chatter`. This can be useful for tracking information about your end users, as well as for personalizing their experience. For example, you may wish to track the `phone_number` and `name` for conversation attribution. Once set, this information can be accessed in the email attachment from Handoff Form submissions, or via the *Chatter Info* modal in the *Conversations* page of your Ada dashboard. Should you need to programatically change these values after bot setup, you can make use of the `setMetaFields` action below.

<aside class="notice">
Meta field keys should not include whitespace, emojis, special characters or periods.
</aside>

#### `lazy?: boolean`
When `true`, this will prevent the bot from loading until the `adaEmbed.start(...)` method is called.

#### `parentElement?: string | HTMLElement`

```html
<head>
  <!-- ... -->
  <script type="text/javascript">
    window.adaSettings = {
      parentElement: document.getElementById("custom-iframe")
    }
  </script>
</head>
<body>
  <!-- ... -->
  <div id="custom-iframe"></div>
</body>
```

Specifies where to mount the `<iframe>` if the default side drawer is not desired. Accepts the `HTMLElement` or element `id` of the desired parent element.

#### `private?: boolean`
If set to `true`, this will put Web Chat into "Private" mode. This will cause Web Chat to forget conversation history on refresh. This is effectively the same as setting your Web Chat platform persistence to "Forget After Reload" in the *Settings > Platforms* page of your Ada dashboard. More information on persistence can be found [here](https://adasupporthelp.zendesk.com/hc/en-us/articles/360018115813-Chatter-Persistence-Remembering-Conversations-).

#### `rolloutOverride?: number`
Can be used to override the rollout value set in the dashboard. This can be useful if you need page-specific rollout values. Accepts any number between `0` and `1`.

#### `styles?: string`
The styles option can be used to override default styles inside the Web Chat iFrame. The value of the string should be the CSS rule-set you wish to apply inside the iFrame. Note that the `ui_customization` feature flag is required to use this feature.

<aside class="warning">
Setting custom styles based on Chat elements is inherently brittle, and can cause your styles to break over time. We do not recommend use of custom styles unless absolutely necessary. If custom styles are used, you should only rely on direct element IDs.
</aside>

#### `testMode?: boolean`
Marks the `chatter` as a test user.

#### `toggleCallback?(isDrawerOpen: boolean): void`
Can be used to trigger side-effects when the Web Chat drawer is opened or closed.

### Methods
# Embed2

Embed2 is a small JavaScript application that embeds your Ada Chat bot into your web page.

## Audience

This document is intended for bot specialists and developers with working knowledge of HTML. For some of the advanced setup, basic knowledge of JavaScript is required. The document also assumes you have a hosted web page that you have write access to.

## Quick Start

### 1. Turn on your bot
The first step towards adding your Ada Chat Bot to your web page is to turn on the Web Chat integration in your Settings > Platforms page.

<%= image_tag "images/turn-on-bot.png" %>

### 2. Embed script

```html
<head>
  ...
  <script
    id="__ada"
    data-handle="<YOUR-BOT-HANDLE>"
    src="https://static.ada.support/embed2.js"
  ></script>
</head>
```
> ðŸ’¡ Be sure to replace `<YOUR-BOT-HANDLE>` with your own bot handle. It's usually the name of your company.

Once you have your website all ready-to-go, find the page where you'd like to embed the Ada Chat bot. This will be a .html file (or equivalent). Here you will need to paste the following into the `<head>` tag.

### 3. That's it! ðŸŽ‰
You should now see a small question mark button on the bottom right corner of your page. Clicking the button will toggle the Web Chat in and out of view.

[You can see see a working example here.](https://jsfiddle.net/avj0fdL3/)

## Advanced Setup


## API Reference

Embed2 supports numerous settings and methods to help you customize the look and behaviour of your bot. Settings are set in the `adaSettings` object when you embed your script. They determine intrinsic properties like bot style and behaviour. Conversely, methods can be called at any point in time to toggle Chat, update user meta data, and more.

### Settings
Settings are set on the window object as `window.adaSettings = { ... }`. Alternatively, they can be passed directly do `adaEmbed.start({ ... })` for advanced configurations. A full list of available settings is provided below:

#### `adaReadyCallback?(params: { isRolledOut: boolean }): void`

```html
<script type="text/javascript">
  window.adaSettings = {
    adaReadyCallback: ({ isRolledOut }) => {
      console.log("Ada Embed is done setting up. Chat support is now available.");
    },
    // ...The rest of your settings here
  }
</script>
```
Specifies a callback function to be called when Embed2 has finished setting up. This is especially useful when Embed2 is loaded asynchronously.

#### `analyticsCallback?(analytics: MessagePayload): void`

```html
<script type="text/javascript">
  window.adaSettings = {
    analyticsCallback: (event) => {
      // Here is where you can forward this event to Adobe (or elsewhere)
      console.log(event);
    },
    // ...The rest of your settings here
  }
</script>
```

Can be used to pass back data analytics. Make sure you have `analyticsCallback` feature enabled on your bot - you can check this with your account manager.

> Example event:

```js
{
  chatter_id: "5d9f84b2a35763fc71cb7bf",
  session_id: "59f84b22c4683df7c38bf69",
  answer_name: "Greeting",
  event_name: "answer presented",
  authenticated: false
}
```

#### `chatterTokenCallback?(chatter: string): void`

```html
<script type="text/javascript">
  window.adaSettings = {
    chatterTokenCallback: (chatter) => {
      console.log("Do something with chatter token: ", chatter)
    },
    // ...The rest of your settings here
  }
</script>
```

Specifies a callback for when the `chatter` token has been set in Chat.

#### `cluster?: string`

```html
<script type="text/javascript">
  window.adaSettings = {
    cluster: "ca",
    // ...The rest of your settings here
  }
</script>
```

Specifies the Kubernetes cluster to be used. Unless directed by an Ada team member, you will not need to change this value.

#### `crossWindowPersistence?: boolean`

```html
<script type="text/javascript">
  window.adaSettings = {
    crossWindowPersistence: true,
    // ...The rest of your settings here
  }
</script>
```

When set enables the Chat drawer open / close state to persist across windows and page refreshes using the `Window.sessionStorage` API. When the browser is closed the state is forgotten.

<aside class="notice">
We recommend enabling this feature if your bot uses Ada Glass.
</aside>


### Methods